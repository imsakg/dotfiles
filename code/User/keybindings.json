// Place your key bindings in this file to override the defaults
[
    {
        "command": "workbench.action.quickTextSearch",
        "key": "ctrl+shift+/"
    },
    {
        "command": "workbench.action.nextEditor",
        "key": "ctrl+tab"
    },
    {
        "command": "workbench.action.previousEditor",
        "key": "ctrl+shift+tab"
    },
    {
        "command": "workbench.action.nextEditor",
        "key": "shift+l",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "command": "workbench.action.previousEditor",
        "key": "shift+h",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "command": "-workbench.action.tasks.build",
        "key": "shift+cmd+b",
        "when": "taskCommandsRegistered"
    },
    {
        "command": "-editor.action.nextMatchFindAction",
        "key": "cmd+g",
        "when": "editorFocus"
    },
    {
        "command": "-editor.action.previousMatchFindAction",
        "key": "shift+cmd+g",
        "when": "editorFocus"
    },
    {
        "key": "space w",
        "command": "workbench.action.files.save",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space shift-w",
        "command": "workbench.action.files.saveWithoutFormatting",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space o",
        "command": "revealInExplorer",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space f h",
        "command": "runCommands",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus",
        "args": {
            "commands": [
                "explorer-exclude.toggleAllOff"
            ]
        }
    },
    {
        "key": "space g b",
        "command": "git-blame.command.lineHistory",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space f f",
        "command": "workbench.action.quickOpen",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space f w",
        "command": "workbench.action.quickTextSearch",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space f d",
        "command": "workbench.files.action.compareWithSaved",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space f shift-w",
        "command": "workbench.action.findInFiles",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space l a",
        "command": "editor.action.codeAction",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && (editorTextFocus)"
    },
    {
        "key": "space l r",
        "command": "editor.action.rename",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && (editorTextFocus)"
    },
    {
        "key": "space l s",
        "command": "workbench.action.gotoSymbol",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space l shift-s",
        "command": "workbench.action.showAllSymbols",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space c",
        "command": "workbench.action.closeActiveEditor",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space space",
        "command": "workbench.action.showAllEditors",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space shift-c",
        "command": "workbench.action.closeOtherEditors",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "command": "workbench.action.terminal.newInActiveWorkspace",
        "key": "cmd+n",
        "when": "terminalFocusInAny"
    },
    {
        "command": "-workbench.action.terminal.findNext",
        "key": "cmd+g",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    },
    {
        "command": "-workbench.action.terminal.findPrevious",
        "key": "shift+cmd+g",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    },
    {
        "command": "-extension.vim_cmd+alt+down",
        "key": "alt+cmd+down",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
    },
    {
        "command": "-extension.vim_cmd+alt+up",
        "key": "alt+cmd+up",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
    },
    {
        "command": "-extension.vim_cmd+d",
        "key": "cmd+d",
        "when": "editorTextFocus && vim.active && vim.use<D-d> && !inDebugRepl"
    },
    {
        "command": "cursorWordPartRight",
        "key": "alt+right",
        "when": "editorTextFocus"
    },
    {
        "command": "cursorWordPartLeft",
        "key": "alt+left",
        "when": "editorTextFocus"
    },
    {
        "command": "workbench.action.quickOpenSelectNext",
        "key": "ctrl+j",
        "when": "inQuickOpen"
    },
    {
        "command": "workbench.action.quickOpenSelectPrevious",
        "key": "ctrl+k",
        "when": "inQuickOpen"
    },
    {
        "command": "selectNextSuggestion",
        "key": "ctrl+j",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "command": "selectPrevSuggestion",
        "key": "ctrl+k",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "command": "acceptSelectedSuggestion",
        "key": "ctrl+l",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "command": "showNextParameterHint",
        "key": "ctrl+j",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "command": "showPrevParameterHint",
        "key": "ctrl+k",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "command": "selectNextCodeAction",
        "key": "ctrl+j",
        "when": "codeActionMenuVisible"
    },
    {
        "command": "selectPrevCodeAction",
        "key": "ctrl+k",
        "when": "codeActionMenuVisible"
    },
    {
        "command": "acceptSelectedCodeAction",
        "key": "ctrl+l",
        "when": "codeActionMenuVisible"
    },
    {
        "command": "file-browser.stepOut",
        "key": "ctrl+h",
        "when": "inFileBrowser"
    },
    {
        "command": "file-browser.stepIn",
        "key": "ctrl+l",
        "when": "inFileBrowser"
    },
    {
        "key": "cmd+r",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "ctrl-shift-left",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "ctrl-shift-right",
        "command": "workbench.action.navigateRight"
    },
    {
        "key": "ctrl-shift-up",
        "command": "workbench.action.navigateUp"
    },
    {
        "key": "ctrl-shift-down",
        "command": "workbench.action.navigateDown"
    },
    {
        "key": "r",
        "command": "renameFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "y",
        "command": "filesExplorer.copy",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "space g g",
        "command": "runCommands",
        "when": "vim.mode == 'Normal' && editorTextFocus",
        "args": {
            "commands": [
                "workbench.view.scm",
                "workbench.scm.focus"
            ]
        }
    },
    {
        "key": "ctrl-n",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": ">",
        "command": "editor.action.indentLines",
        "when": "(vim.mode == 'Visual' || vim.mode == 'VisualLine') && (editorTextFocus || !inputFocus)"
    },
    {
        "key": "<",
        "command": "editor.action.outdentLines",
        "when": "(vim.mode == 'Visual' || vim.mode == 'VisualLine') && (editorTextFocus || !inputFocus)"
    },
    {
        "key": "space f p",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus",
        "command": "workbench.action.pinEditor"
    },
    {
        "key": "space f p",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus && (activeEditorIsPinned)",
        "command": "workbench.action.unpinEditor"
    },
    {
        "key": "space f i",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus ",
        "command": "ruff.executeOrganizeImports"
    },
    {
        "key": "shift+\\",
        "command": "workbench.action.splitEditor",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "\\",
        "command": "workbench.action.splitEditorDown",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space /",
        "command": "editor.action.commentLine",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && (editorTextFocus || editorReadonly)"
    },
    {
        "key": "c",
        "command": "copyRelativeFilePath",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "shift-c",
        "command": "copyFilePath",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "p",
        "command": "filesExplorer.paste",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "d",
        "command": "filesExplorer.cut",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "D",
        "command": "deleteFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "a",
        "command": "explorer.newFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "shift-a",
        "command": "explorer.newFolder",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "s",
        "command": "explorer.openToSide",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "shift-s",
        "command": "runCommands",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus",
        "args": {
            "commands": [
                "workbench.action.splitEditorDown",
                "explorer.openAndPassFocus",
                "workbench.action.closeOtherEditors"
            ]
        }
    },
    {
        "key": "enter",
        "command": "explorer.openAndPassFocus",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "enter",
        "command": "list.toggleExpand",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "shift-k",
        "command": "editor.action.showHover",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "shift-i",
        "command": "editor.action.peekDefinition",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "cmd+`",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+`",
        "command": "-workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "shift+cmd+`",
        "command": "workbench.action.terminal.new",
        "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
    },
    {
        "key": "ctrl+shift+`",
        "command": "-workbench.action.terminal.new",
        "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
    },
    {
        "key": "shift+cmd+g",
        "command": "workbench.view.scm",
        "when": "workbench.scm.active"
    },
    {
        "key": "ctrl+shift+g",
        "command": "-workbench.view.scm",
        "when": "workbench.scm.active"
    },
    // Debug
    {
        "key": "space d a",
        "command": "workbench.action.debug.selectandstart",
        "when": "vim.mode == 'Normal' && editorTextFocus && debuggersAvailable"
    },
    {
        "key": "space d t",
        "command": "workbench.action.debug.stop",
        "when": "vim.mode == 'Normal' && editorTextFocus && inDebugMode && !focusedSessionIsAttached"
    },
    {
        "key": "space d o",
        "command": "workbench.action.debug.stepOver",
        "when": "vim.mode == 'Normal' && editorTextFocus && inDebugMode && debugState == 'stopped'"
    },
    {
        "key": "space d b",
        "command": "editor.debug.action.toggleBreakpoint",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space d e",
        "command": "editor.debug.action.showDebugHover",
        "when": "vim.mode == 'Normal' && editorTextFocus && inDebugMode && debugState == 'stopped'"
    },
    {
        "key": "space d c",
        "command": "workbench.action.debug.continue",
        "when": "vim.mode == 'Normal' && editorTextFocus && inDebugMode && debugState == 'stopped'"
    },
    {
        "key": "space enter",
        "command": "workbench.action.toggleEditorWidths",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space \\",
        "command": "regionfolder.wrapWithRegion",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus && editor.hasSelection"
    },
    {
        "key": "space shift-\\",
        "command": "regionfolder.wrapWithRegionAndComment",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    // TOGGLES
    {
        "key": "space e",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "vim.mode == 'Normal' && editorTextFocus"
    },
    {
        "key": "space e",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.toggleSidebarVisibility",
                "workbench.action.focusActiveEditorGroup"
            ]
        },
        "when": "sideBarFocus && !inputFocus"
    },
    {
        "key": "space e",
        "when": "vim.mode == 'Normal' && editorTextFocus && foldersViewVisible",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "space t f",
        "command": "workbench.view.explorer",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space t g",
        "command": "workbench.view.scm",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space t c",
        "command": "workbench.view.extension.claude-dev-ActivityBar",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space t x",
        "command": "workbench.view.extension.todo-tree-container",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space t t",
        "command": "workbench.action.terminal.focus",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space t m",
        "command": "workbench.action.problems.focus",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space t a",
        "command": "workbench.action.toggleActivityBarVisibility",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space t '",
        "command": "workbench.view.extension.bookmarks",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "shift-;",
        "command": "workbench.action.gotoLine",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space shift-;",
        "command": "vim.showQuickpickCmdLine",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space f '",
        "command": "bookmarks.list",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space f shift-'",
        "command": "bookmarks.listFromAllFiles",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space m a",
        "command": "bookmarks.toggle",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space m shift-a",
        "command": "bookmarks.toggleLabeled",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space m c",
        "command": "bookmarks.clear",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space m shift-c",
        "command": "bookmarks.clear",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space n",
        "command": "openEditors.newUntitledFile",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space f r",
        "command": "editor.action.startFindReplaceAction",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space f shift-r",
        "command": "workbench.action.replaceInFiles",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space a q",
        "command": "workbench.action.quickchat.toggle",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space a i",
        "command": "inlineChat.start",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space a i",
        "command": "inlineChat.startWithCurrentLine",
        "when": "( vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus && editorHasSelection"
    },
    {
        "key": "space a c",
        "command": "workbench.action.chat.open",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "space a c",
        "command": "workbench.panel.chat",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus && workbench.panel.chat.view.copilot.active"
    },
    {
        "key": "space a e",
        "command": "workbench.action.chat.openEditSession",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus && chatEditingParticipantRegistered && view != 'workbench.panel.chat.view.edits'"
    },
    {
        "key": "space a e",
        "command": "workbench.panel.chatEditing",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus && workbench.panel.chat.view.edits.active"
    },
    {
        "key": "space p",
        "command": "workbench.action.showCommands",
        "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus"
    },
    {
        "key": "escape",
        "command": "-extension.vim_escape",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
    },
    {
        "key": "escape",
        "command": "extension.vim_escape",
        "when": "editorTextFocus && vim.active && !inDebugRepl && !testing.isPeekVisible && !testing.isInPeek && (vim.mode == 'Insert' || !notebookEditorFocused) && !inlineEditIsVisible && !suggestWidgetVisible && !findWidgetVisible && !dirtyDiffVisible"
    },
    {
        "key": "escape",
        "command": "runCommands",
        "when": "vim.mode == 'Insert' && inlineEditIsVisible",
        "args": {
            "commands": [
                "editor.action.inlineSuggest.hide",
                "extension.vim_escape"
            ]
        }
    },
    {
        "key": "escape",
        "command": "runCommands",
        "when": "vim.mode == 'Insert' && suggestWidgetVisible",
        "args": {
            "commands": [
                "hideSuggestWidget",
                "extension.vim_escape"
            ]
        }
    },
    {
        "key": "escape",
        "command": "-hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "escape",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus && !vim.active"
    },
    {
        // Remove VSCodeVim's handling of tab to enable default handling of tab
        // e.g. for inline suggestions.
        "key": "tab",
        "command": "-extension.vim_tab"
    },
    {
        "key": "alt+cmd+i",
        "command": "kilo-code.ghost.promptCodeSuggestion",
        "when": "editorTextFocus && kilocode.ghost.enableQuickInlineTaskKeybinding && !editorTabMovesFocus && !inSnippetMode"
    },
    {
        "key": "cmd+i",
        "command": "-kilo-code.ghost.promptCodeSuggestion",
        "when": "editorTextFocus && kilocode.ghost.enableQuickInlineTaskKeybinding && !editorTabMovesFocus && !inSnippetMode"
    }
]